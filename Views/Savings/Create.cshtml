@model Thrift.Models.SavingsGoal
@{
    ViewData["Title"] = "Create New Savings Goal";
    var icons = ViewData["Icons"] as List<string>;
    var colors = ViewData["Colors"] as List<string>;
}

<!-- Modern Background with Floating Elements -->
<div class="create-savings-bg">
    <div class="floating-shape shape-1">
        <i class="fas fa-coins"></i>
    </div>
    <div class="floating-shape shape-2">
        <i class="fas fa-chart-line"></i>
    </div>
    <div class="floating-shape shape-3">
        <i class="fas fa-piggy-bank"></i>
    </div>
    <div class="floating-shape shape-4">
        <i class="fas fa-target"></i>
    </div>
    <div class="floating-shape shape-5">
        <i class="fas fa-trophy"></i>
    </div>
</div>

<div class="container-fluid min-vh-100 d-flex align-items-center py-5 position-relative">
    <div class="container">
        <div class="row justify-content-center">
            <!-- Main Create Form -->
            <div class="col-xl-8 col-lg-10">
                <div class="create-savings-card glass-card">
                    <!-- Header Section -->
                    <div class="create-header text-center mb-5">
                        <div class="header-icon mb-4">
                            <div class="icon-circle">
                                <i class="fas fa-plus-circle"></i>
                            </div>
                        </div>
                        <h1 class="create-title">Create Your Savings Goal</h1>
                        <p class="create-subtitle">Turn your dreams into achievable milestones</p>
                        <div class="progress-indicator">
                            <div class="step active" data-step="1">
                                <span class="step-number">1</span>
                                <span class="step-label">Basic Info</span>
                            </div>
                            <div class="step" data-step="2">
                                <span class="step-number">2</span>
                                <span class="step-label">Details</span>
                            </div>
                            <div class="step" data-step="3">
                                <span class="step-number">3</span>
                                <span class="step-label">Customize</span>
                            </div>
                        </div>
                    </div>                    <form asp-action="Create" class="create-form" method="post">
                        @Html.AntiForgeryToken()
                          <!-- Hidden fields to ensure required values are submitted -->
                        <input type="hidden" asp-for="UserId" />
                        <input type="hidden" asp-for="CurrentAmount" value="0" />
                        <input type="hidden" asp-for="Status" value="Active" />
                        
                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @TempData["ErrorMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                        
                        @if (TempData["DetailedErrors"] != null)
                        {
                            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                                <strong>Validation Details:</strong><br>
                                @TempData["DetailedErrors"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                        
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                        
                        <!-- Step 1: Basic Information -->
                        <div class="form-step active" data-step="1">
                            <div class="step-content">
                                <h3 class="step-title">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Basic Information
                                </h3>
                                <p class="step-description">Let's start with the basics of your savings goal</p>

                                <div class="form-floating mb-4">
                                    <input asp-for="Name" class="form-control enhanced-input" placeholder="Goal Name" />
                                    <label asp-for="Name">Goal Name</label>
                                    <span asp-validation-for="Name" class="invalid-feedback"></span>
                                    <div class="input-hint">
                                        <i class="fas fa-lightbulb me-1"></i>
                                        Try: "Emergency Fund", "Dream Vacation", "New Car"
                                    </div>
                                </div>

                                <div class="form-floating mb-4">
                                    <textarea asp-for="Description" class="form-control enhanced-input" placeholder="Description" style="height: 100px"></textarea>
                                    <label asp-for="Description">Description (Optional)</label>
                                    <span asp-validation-for="Description" class="invalid-feedback"></span>
                                    <div class="input-hint">
                                        <i class="fas fa-edit me-1"></i>
                                        Describe what this goal means to you
                                    </div>
                                </div>

                                <div class="form-floating mb-4">
                                    <input asp-for="TargetAmount" class="form-control enhanced-input" placeholder="Target Amount" />
                                    <label asp-for="TargetAmount">Target Amount ($)</label>
                                    <span asp-validation-for="TargetAmount" class="invalid-feedback"></span>
                                    <div class="amount-suggestions mt-2">
                                        <span class="suggestion-label">Quick amounts:</span>
                                        <button type="button" class="amount-btn" data-amount="1000">$1,000</button>
                                        <button type="button" class="amount-btn" data-amount="5000">$5,000</button>
                                        <button type="button" class="amount-btn" data-amount="10000">$10,000</button>
                                        <button type="button" class="amount-btn" data-amount="25000">$25,000</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 2: Goal Details -->
                        <div class="form-step" data-step="2">
                            <div class="step-content">
                                <h3 class="step-title">
                                    <i class="fas fa-calendar-alt me-2"></i>
                                    Goal Details
                                </h3>
                                <p class="step-description">Set your timeline and categorize your goal</p>

                                <div class="row">
                                    <div class="col-md-6 mb-4">
                                        <div class="form-floating">
                                            <input asp-for="TargetDate" type="date" class="form-control enhanced-input" />
                                            <label asp-for="TargetDate">Target Date (Optional)</label>
                                            <span asp-validation-for="TargetDate" class="invalid-feedback"></span>
                                        </div>
                                        <div class="date-suggestions mt-2">
                                            <button type="button" class="date-btn" data-months="3">3 months</button>
                                            <button type="button" class="date-btn" data-months="6">6 months</button>
                                            <button type="button" class="date-btn" data-months="12">1 year</button>
                                            <button type="button" class="date-btn" data-months="24">2 years</button>
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-4">
                                        <div class="savings-calculator">
                                            <h6>Monthly Savings Needed</h6>
                                            <div class="calculator-result">
                                                <span class="amount" id="monthlyAmount">$0</span>
                                                <small class="text-muted">per month</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-4">
                                        <div class="form-floating">
                                            <select asp-for="Category" asp-items="ViewBag.Categories" class="form-select enhanced-select">
                                                <option value="">Choose category...</option>
                                            </select>
                                            <label asp-for="Category">Category</label>
                                            <span asp-validation-for="Category" class="invalid-feedback"></span>
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-4">
                                        <div class="form-floating">
                                            <select asp-for="Priority" asp-items="ViewBag.Priorities" class="form-select enhanced-select">
                                                <option value="">Choose priority...</option>
                                            </select>
                                            <label asp-for="Priority">Priority Level</label>
                                            <span asp-validation-for="Priority" class="invalid-feedback"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 3: Customization -->
                        <div class="form-step" data-step="3">
                            <div class="step-content">
                                <h3 class="step-title">
                                    <i class="fas fa-palette me-2"></i>
                                    Customize Your Goal
                                </h3>
                                <p class="step-description">Make it personal with icons and colors</p>

                                <!-- Icon Selection -->
                                <div class="customization-section mb-5">
                                    <h5 class="section-title">
                                        <i class="fas fa-icons me-2"></i>
                                        Choose an Icon
                                    </h5>
                                    <div class="icon-grid">
                                        @if (icons != null)
                                        {
                                            @foreach (var icon in icons)
                                            {
                                                <div class="icon-option @(Model?.Icon == icon ? "selected" : "")" data-icon="@icon">
                                                    <i class="fas fa-@icon"></i>
                                                    <span class="icon-name">@icon.Replace("-", " ")</span>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <input type="hidden" asp-for="Icon" id="selectedIcon" value="@(Model?.Icon ?? "piggy-bank")" />
                                </div>

                                <!-- Color Selection -->
                                <div class="customization-section mb-4">
                                    <h5 class="section-title">
                                        <i class="fas fa-palette me-2"></i>
                                        Choose a Color Theme
                                    </h5>
                                    <div class="color-grid">
                                        @if (colors != null)
                                        {
                                            @foreach (var color in colors)
                                            {
                                                <div class="color-option" data-color="@color">
                                                    <div class="color-circle bg-@color-500 @(Model?.ColorTheme == color ? "selected" : "")">
                                                        <i class="fas fa-check"></i>
                                                    </div>
                                                    <span class="color-name">@color.Substring(0, 1).ToUpper()@color.Substring(1)</span>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <input type="hidden" asp-for="ColorTheme" id="selectedColor" value="@(Model?.ColorTheme ?? "purple")" />
                                </div>

                                <!-- Goal Preview -->
                                <div class="goal-preview">
                                    <h5 class="section-title">
                                        <i class="fas fa-eye me-2"></i>
                                        Goal Preview
                                    </h5>
                                    <div class="preview-card" id="goalPreview">
                                        <div class="preview-header">
                                            <div class="preview-icon">
                                                <i class="fas fa-piggy-bank"></i>
                                            </div>
                                            <div class="preview-details">
                                                <h6 class="preview-name">Your Goal Name</h6>
                                                <p class="preview-amount">$0</p>
                                            </div>
                                        </div>
                                        <div class="preview-progress">
                                            <div class="progress">
                                                <div class="progress-bar" style="width: 0%"></div>
                                            </div>
                                            <small class="text-muted">0% complete</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Navigation Buttons -->
                        <div class="form-navigation">
                            <button type="button" class="btn btn-outline-secondary prev-btn" disabled>
                                <i class="fas fa-arrow-left me-2"></i>
                                Previous
                            </button>
                            <button type="button" class="btn btn-primary next-btn">
                                Next
                                <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                            <button type="submit" class="btn btn-success submit-btn" style="display: none;">
                                <i class="fas fa-check me-2"></i>
                                Create Goal
                            </button>
                            <a asp-action="Index" class="btn btn-outline-danger ms-2">
                                <i class="fas fa-times me-2"></i>
                                Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Sidebar with Tips -->
            <div class="col-xl-4 col-lg-2 d-none d-lg-block">
                <div class="tips-sidebar">
                    <div class="tip-card">
                        <div class="tip-icon">
                            <i class="fas fa-lightbulb"></i>
                        </div>
                        <h6>Pro Tip</h6>
                        <p>Set realistic targets that you can achieve. It's better to reach a smaller goal than to give up on a larger one.</p>
                    </div>
                    <div class="tip-card">
                        <div class="tip-icon">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <h6>Timeline Matters</h6>
                        <p>Goals with deadlines are 10x more likely to be achieved. Set a target date to stay motivated.</p>
                    </div>
                    <div class="tip-card">
                        <div class="tip-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <h6>Track Progress</h6>
                        <p>Regular small contributions are more effective than occasional large deposits.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        class SavingsGoalCreator {
            constructor() {
                this.currentStep = 1;
                this.totalSteps = 3;
                this.init();
            }

            init() {
                this.bindEvents();
                this.updatePreview();
                this.setupValidation();
                this.animateEntry();
            }

            bindEvents() {
                // Navigation buttons
                document.querySelector('.next-btn').addEventListener('click', () => this.nextStep());
                document.querySelector('.prev-btn').addEventListener('click', () => this.prevStep());

                // Icon selection
                document.querySelectorAll('.icon-option').forEach(icon => {
                    icon.addEventListener('click', (e) => this.selectIcon(e.target.closest('.icon-option')));
                });

                // Color selection
                document.querySelectorAll('.color-option').forEach(color => {
                    color.addEventListener('click', (e) => this.selectColor(e.target.closest('.color-option')));
                });

                // Amount suggestions
                document.querySelectorAll('.amount-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.setAmount(e.target.dataset.amount));
                });

                // Date suggestions
                document.querySelectorAll('.date-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => this.setDate(e.target.dataset.months));
                });

                // Form input changes
                document.getElementById('Name').addEventListener('input', () => this.updatePreview());
                document.getElementById('TargetAmount').addEventListener('input', () => {
                    this.updatePreview();
                    this.calculateMonthly();
                });
                document.getElementById('TargetDate').addEventListener('change', () => this.calculateMonthly());

                // Enhanced input effects
                document.querySelectorAll('.enhanced-input, .enhanced-select').forEach(input => {
                    input.addEventListener('focus', (e) => this.addInputFocus(e.target));
                    input.addEventListener('blur', (e) => this.removeInputFocus(e.target));
                });
            }

            nextStep() {
                if (this.validateCurrentStep() && this.currentStep < this.totalSteps) {
                    this.currentStep++;
                    this.updateStepDisplay();
                    this.animateStepTransition();
                }
            }

            prevStep() {
                if (this.currentStep > 1) {
                    this.currentStep--;
                    this.updateStepDisplay();
                    this.animateStepTransition();
                }
            }

            updateStepDisplay() {
                // Update progress indicator
                document.querySelectorAll('.step').forEach((step, index) => {
                    if (index + 1 <= this.currentStep) {
                        step.classList.add('active');
                        step.classList.remove('completed');
                        if (index + 1 < this.currentStep) {
                            step.classList.add('completed');
                        }
                    } else {
                        step.classList.remove('active', 'completed');
                    }
                });

                // Update form steps
                document.querySelectorAll('.form-step').forEach((step, index) => {
                    step.classList.toggle('active', index + 1 === this.currentStep);
                });

                // Update navigation buttons
                const prevBtn = document.querySelector('.prev-btn');
                const nextBtn = document.querySelector('.next-btn');
                const submitBtn = document.querySelector('.submit-btn');

                prevBtn.disabled = this.currentStep === 1;
                
                if (this.currentStep === this.totalSteps) {
                    nextBtn.style.display = 'none';
                    submitBtn.style.display = 'inline-block';
                } else {
                    nextBtn.style.display = 'inline-block';
                    submitBtn.style.display = 'none';
                }
            }

            animateStepTransition() {
                const activeStep = document.querySelector('.form-step.active');
                activeStep.style.opacity = '0';
                activeStep.style.transform = 'translateX(30px)';
                
                setTimeout(() => {
                    activeStep.style.transition = 'all 0.3s ease';
                    activeStep.style.opacity = '1';
                    activeStep.style.transform = 'translateX(0)';
                }, 50);
            }

            validateCurrentStep() {
                let isValid = true;
                const currentStepElement = document.querySelector(`.form-step[data-step="${this.currentStep}"]`);
                const inputs = currentStepElement.querySelectorAll('input[required], select[required]');

                inputs.forEach(input => {
                    if (!input.value.trim()) {
                        this.showInputError(input, 'This field is required');
                        isValid = false;
                    } else {
                        this.clearInputError(input);
                    }
                });

                // Step-specific validation
                if (this.currentStep === 1) {
                    const nameInput = document.getElementById('Name');
                    const amountInput = document.getElementById('TargetAmount');
                    
                    if (!nameInput.value.trim()) {
                        this.showInputError(nameInput, 'Goal name is required');
                        isValid = false;
                    }
                    
                    if (!amountInput.value || parseFloat(amountInput.value) <= 0) {
                        this.showInputError(amountInput, 'Please enter a valid target amount');
                        isValid = false;
                    }
                }

                return isValid;
            }

            showInputError(input, message) {
                input.classList.add('is-invalid');
                let feedback = input.parentElement.querySelector('.invalid-feedback');
                if (!feedback) {
                    feedback = document.createElement('div');
                    feedback.className = 'invalid-feedback';
                    input.parentElement.appendChild(feedback);
                }
                feedback.textContent = message;
            }

            clearInputError(input) {
                input.classList.remove('is-invalid');
                const feedback = input.parentElement.querySelector('.invalid-feedback');
                if (feedback) {
                    feedback.textContent = '';
                }
            }

            selectIcon(iconElement) {
                document.querySelectorAll('.icon-option').forEach(i => i.classList.remove('selected'));
                iconElement.classList.add('selected');
                document.getElementById('selectedIcon').value = iconElement.dataset.icon;
                
                // Animate selection
                iconElement.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    iconElement.style.transform = 'scale(1)';
                }, 200);

                this.updatePreview();
            }

            selectColor(colorElement) {
                document.querySelectorAll('.color-circle').forEach(c => c.classList.remove('selected'));
                colorElement.querySelector('.color-circle').classList.add('selected');
                document.getElementById('selectedColor').value = colorElement.dataset.color;
                
                // Animate selection
                colorElement.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    colorElement.style.transform = 'scale(1)';
                }, 200);

                this.updatePreview();
            }

            setAmount(amount) {
                document.getElementById('TargetAmount').value = amount;
                this.updatePreview();
                this.calculateMonthly();
                
                // Animate button click
                event.target.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    event.target.style.transform = 'scale(1)';
                }, 150);
            }

            setDate(months) {
                const today = new Date();
                const targetDate = new Date(today.getFullYear(), today.getMonth() + parseInt(months), today.getDate());
                document.getElementById('TargetDate').value = targetDate.toISOString().split('T')[0];
                this.calculateMonthly();
                
                // Animate button click
                event.target.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    event.target.style.transform = 'scale(1)';
                }, 150);
            }

            calculateMonthly() {
                const amount = parseFloat(document.getElementById('TargetAmount').value) || 0;
                const targetDate = document.getElementById('TargetDate').value;
                
                if (amount > 0 && targetDate) {
                    const today = new Date();
                    const target = new Date(targetDate);
                    const months = Math.max(1, Math.ceil((target - today) / (1000 * 60 * 60 * 24 * 30)));
                    const monthly = amount / months;
                    
                    document.getElementById('monthlyAmount').textContent = `$${monthly.toFixed(2)}`;
                } else {
                    document.getElementById('monthlyAmount').textContent = '$0';
                }
            }

            updatePreview() {
                const name = document.getElementById('Name').value || 'Your Goal Name';
                const amount = document.getElementById('TargetAmount').value || '0';
                const icon = document.getElementById('selectedIcon').value || 'piggy-bank';
                const color = document.getElementById('selectedColor').value || 'purple';
                
                const preview = document.getElementById('goalPreview');
                if (preview) {
                    preview.querySelector('.preview-name').textContent = name;
                    preview.querySelector('.preview-amount').textContent = `$${parseFloat(amount).toLocaleString()}`;
                    preview.querySelector('.preview-icon i').className = `fas fa-${icon}`;
                    preview.className = `preview-card bg-${color}-gradient`;
                }
            }

            addInputFocus(input) {
                input.parentElement.classList.add('focused');
                this.createRipple(input);
            }

            removeInputFocus(input) {
                setTimeout(() => {
                    input.parentElement.classList.remove('focused');
                }, 100);
            }

            createRipple(element) {
                const ripple = document.createElement('div');
                ripple.className = 'input-ripple';
                element.parentElement.appendChild(ripple);
                
                setTimeout(() => {
                    ripple.remove();
                }, 600);
            }

            animateEntry() {
                // Animate floating shapes
                document.querySelectorAll('.floating-shape').forEach((shape, index) => {
                    setTimeout(() => {
                        shape.style.animation = `float 6s ease-in-out infinite ${index * 0.5}s`;
                    }, index * 200);
                });

                // Animate main card entry
                const card = document.querySelector('.create-savings-card');
                card.style.opacity = '0';
                card.style.transform = 'translateY(50px)';
                
                setTimeout(() => {
                    card.style.transition = 'all 0.8s cubic-bezier(0.4, 0, 0.2, 1)';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 300);

                // Animate tips sidebar
                const tips = document.querySelectorAll('.tip-card');
                tips.forEach((tip, index) => {
                    setTimeout(() => {
                        tip.style.opacity = '0';
                        tip.style.transform = 'translateX(30px)';
                        tip.style.transition = 'all 0.6s ease';
                        
                        setTimeout(() => {
                            tip.style.opacity = '1';
                            tip.style.transform = 'translateX(0)';
                        }, 100);
                    }, 800 + (index * 200));
                });
            }

            setupValidation() {
                // Real-time validation
                document.getElementById('Name').addEventListener('input', (e) => {
                    if (e.target.value.length < 3 && e.target.value.length > 0) {
                        this.showInputError(e.target, 'Goal name must be at least 3 characters');
                    } else {
                        this.clearInputError(e.target);
                    }
                });

                document.getElementById('TargetAmount').addEventListener('input', (e) => {
                    const value = parseFloat(e.target.value);
                    if (e.target.value && (isNaN(value) || value <= 0)) {
                        this.showInputError(e.target, 'Please enter a valid amount greater than 0');
                    } else {
                        this.clearInputError(e.target);
                    }
                });
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            new SavingsGoalCreator();
        });

        // Add smooth scrolling for better UX
        function smoothScrollTo(element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    </script>
}

@section Styles {
    <style>
        /* Root Variables */
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --glass-bg: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
            --shadow-soft: 0 8px 32px rgba(31, 38, 135, 0.37);
            --shadow-hover: 0 15px 35px rgba(31, 38, 135, 0.2);
        }

        /* Background and Layout */
        .create-savings-bg {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            z-index: -1;
            overflow: hidden;
        }

        .create-savings-bg::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="0.5" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            animation: grain 8s linear infinite;
        }        @@keyframes grain {
            0%, 100% { transform: translate(0, 0); }
            25% { transform: translate(-5px, -5px); }
            50% { transform: translate(5px, 5px); }
            75% { transform: translate(-5px, 5px); }
        }

        /* Floating Background Elements */
        .floating-shape {
            position: absolute;
            color: rgba(255, 255, 255, 0.1);
            font-size: 2rem;
            pointer-events: none;
            z-index: 0;
        }

        .shape-1 { top: 10%; left: 10%; }
        .shape-2 { top: 20%; right: 15%; }
        .shape-3 { bottom: 30%; left: 5%; }
        .shape-4 { top: 60%; right: 10%; }
        .shape-5 { bottom: 10%; right: 20%; }        @@keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            33% { transform: translateY(-20px) rotate(2deg); }
            66% { transform: translateY(10px) rotate(-1deg); }
        }

        /* Main Container */
        .container-fluid {
            position: relative;
            z-index: 1;
        }

        /* Glass Card Effect */
        .glass-card {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            box-shadow: var(--shadow-soft);
            padding: 2.5rem;
            position: relative;
            overflow: hidden;
        }

        .glass-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        }

        .create-savings-card {
            max-width: 900px;
            margin: 0 auto;
        }

        /* Header Section */
        .create-header {
            position: relative;
            z-index: 2;
        }

        .header-icon {
            position: relative;
        }

        .icon-circle {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
            position: relative;
            overflow: hidden;
        }

        .icon-circle::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: rotate(45deg);
            animation: shimmer 3s linear infinite;
        }

        .icon-circle i {
            font-size: 2rem;
            color: white;
            z-index: 1;
            position: relative;
        }        @@keyframes shimmer {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .create-title {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }

        .create-subtitle {
            font-size: 1.1rem;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 2rem;
        }

        /* Progress Indicator */
        .progress-indicator {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
            position: relative;
            opacity: 0.5;
            transition: all 0.3s ease;
        }

        .step.active {
            opacity: 1;
        }

        .step.completed {
            opacity: 1;
        }

        .step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: white;
            transition: all 0.3s ease;
        }

        .step.active .step-number {
            background: var(--primary-gradient);
            border-color: transparent;
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.5);
        }

        .step.completed .step-number {
            background: var(--success-gradient);
            border-color: transparent;
        }

        .step.completed .step-number::after {
            content: '✓';
            font-size: 0.9rem;
        }

        .step-label {
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.7);
            font-weight: 500;
        }

        .step.active .step-label {
            color: white;
        }

        /* Form Steps */
        .form-step {
            display: none;
            animation: fadeInUp 0.5s ease;
        }

        .form-step.active {
            display: block;
        }        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .step-content {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .step-title {
            color: white;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .step-description {
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 2rem;
        }

        /* Enhanced Form Controls */
        .form-floating {
            position: relative;
            margin-bottom: 1.5rem;
        }        .enhanced-input, .enhanced-select {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            color: white;
            padding: 1rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            position: relative;
        }        /* Enhanced Select Styling - Fixed dropdown arrow issue */
        .enhanced-select {
            /* Remove all default browser styling */
            appearance: none !important;
            -webkit-appearance: none !important;
            -moz-appearance: none !important;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e") !important;
            background-repeat: no-repeat !important;
            background-position: right 1rem center !important;
            background-size: 1rem !important;
            padding-right: 3rem !important;
            cursor: pointer;
        }

        /* Firefox specific fixes */
        .enhanced-select:-moz-focusring {
            color: transparent;
            text-shadow: 0 0 0 white;
        }

        /* Hide any additional browser-specific dropdown arrows */
        .enhanced-select::-ms-expand {
            display: none;
        }

        .enhanced-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        /* Dropdown options styling */
        .enhanced-select option {
            background-color: #2d3748 !important;
            color: white !important;
            padding: 0.5rem;
            border: none;
        }

        .enhanced-select option:hover {
            background-color: #4a5568 !important;
        }

        .enhanced-select option:checked,
        .enhanced-select option:selected {
            background-color: #667eea !important;
            color: white !important;
        }

        /* Focus state styling */
        .enhanced-input:focus, .enhanced-select:focus {
            outline: none;
            border-color: rgba(102, 126, 234, 0.8);
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);
            background: rgba(255, 255, 255, 0.15);
        }

        /* Enhanced focus state for select dropdowns */
        .enhanced-select:focus {
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23667eea' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e") !important;
        }

        .form-floating > label {
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
        }

        .form-floating.focused > label {
            color: #667eea;
        }

        .input-hint {
            font-size: 0.85rem;
            color: rgba(255, 255, 255, 0.6);
            margin-top: 0.5rem;
        }

        .input-ripple {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            transform: translate(-50%, -50%);
            animation: ripple 0.6s ease-out;
        }        @@keyframes ripple {
            to {
                width: 300px;
                height: 300px;
                opacity: 0;
            }
        }

        /* Quick Action Buttons */
        .amount-suggestions, .date-suggestions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-top: 0.5rem;
        }

        .suggestion-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.85rem;
            margin-right: 0.5rem;
            align-self: center;
        }

        .amount-btn, .date-btn {
            background: rgba(255, 255, 255, 0.1) !important;
            border: 1px solid rgba(255, 255, 255, 0.2) !important;
            color: rgba(255, 255, 255, 0.9) !important;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            font-size: 0.85rem;
        }

        .amount-btn:hover, .date-btn:hover {
            background: rgba(102, 126, 234, 0.3) !important;
            border-color: rgba(102, 126, 234, 0.5) !important;
            color: white !important;
            transform: translateY(-1px);
        }

        /* Form Navigation Button Styles */
        .form-navigation {
            display: flex;
            gap: 1rem;
            justify-content: center;
            align-items: center;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .form-navigation .btn {
            padding: 0.75rem 2rem;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
            border: 2px solid transparent;
            position: relative;
            overflow: hidden;
        }

        .form-navigation .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
            border-color: #667eea !important;
            color: white !important;
        }

        .form-navigation .btn-primary:hover {
            background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%) !important;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4) !important;
        }

        .form-navigation .btn-success {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%) !important;
            border-color: #48bb78 !important;
            color: white !important;
        }

        .form-navigation .btn-success:hover {
            background: linear-gradient(135deg, #38a169 0%, #2f855a 100%) !important;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(72, 187, 120, 0.4) !important;
        }

        .form-navigation .btn-outline-secondary {
            background: transparent !important;
            border-color: rgba(255, 255, 255, 0.3) !important;
            color: rgba(255, 255, 255, 0.8) !important;
        }

        .form-navigation .btn-outline-secondary:hover:not(:disabled) {
            background: rgba(255, 255, 255, 0.1) !important;
            border-color: rgba(255, 255, 255, 0.5) !important;
            color: white !important;
        }

        .form-navigation .btn-outline-danger {
            background: transparent !important;
            border-color: rgba(245, 101, 101, 0.5) !important;
            color: rgba(245, 101, 101, 0.8) !important;
        }

        .form-navigation .btn-outline-danger:hover {
            background: rgba(245, 101, 101, 0.1) !important;
            border-color: #f56565 !important;
            color: #f56565 !important;
        }

        .form-navigation .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
            box-shadow: none !important;
        }

        /* Tips Sidebar */
        .tips-sidebar {
            position: sticky;
            top: 2rem;
            height: fit-content;
        }

        .tip-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            transition: all 0.3s ease;
            opacity: 0;
        }

        .tip-card:hover {
            transform: translateX(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .tip-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
        }

        .tip-card h6 {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .tip-card p {
            font-size: 0.9rem;
            opacity: 0.8;
            margin: 0;
            line-height: 1.5;
        }        /* Responsive Design */
        @@media (max-width: 768px) {
            .create-title {
                font-size: 2rem;
            }
            
            .progress-indicator {
                gap: 0.5rem;
            }
            
            .step-label {
                display: none;
            }
            
            .glass-card {
                padding: 1.5rem;
            }
            
            .icon-grid {
                grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
            }
            
            .color-grid {
                grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));
            }
            
            .amount-suggestions, .date-suggestions {
                justify-content: center;
            }
        }        /* Validation Styles */
        .is-invalid {
            border-color: #dc3545 !important;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.3) !important;
        }

        .invalid-feedback {
            color: #ff6b6b;
            font-size: 0.85rem;
            margin-top: 0.5rem;
        }

        /* Customization Section Styles */
        .customization-section {
            margin-bottom: 2rem;
        }

        .section-title {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }

        /* Icon Grid Styles */
        .icon-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .icon-option {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 1rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            color: rgba(255, 255, 255, 0.8);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
        }

        .icon-option:hover {
            background: rgba(255, 255, 255, 0.15);
            border-color: rgba(102, 126, 234, 0.5);
            transform: translateY(-2px);
            color: white;
        }

        .icon-option.selected {
            background: rgba(102, 126, 234, 0.3);
            border-color: #667eea;
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .icon-option i {
            font-size: 1.8rem;
            margin-bottom: 0.25rem;
        }

        .icon-name {
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        /* Color Grid Styles */
        .color-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(90px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .color-option {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .color-option:hover {
            transform: translateY(-2px);
        }

        .color-circle {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 3px solid rgba(255, 255, 255, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            position: relative;
        }

        .color-circle.selected {
            border-color: white;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            transform: scale(1.1);
        }

        .color-circle i {
            color: white;
            font-size: 1.2rem;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .color-circle.selected i {
            opacity: 1;
        }

        .color-name {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
            text-transform: capitalize;
        }

        /* Color Theme Classes */
        .bg-purple-500 { background-color: #8b5cf6 !important; }
        .bg-blue-500 { background-color: #3b82f6 !important; }
        .bg-green-500 { background-color: #10b981 !important; }
        .bg-red-500 { background-color: #ef4444 !important; }
        .bg-yellow-500 { background-color: #f59e0b !important; }
        .bg-pink-500 { background-color: #ec4899 !important; }
        .bg-indigo-500 { background-color: #6366f1 !important; }
        .bg-teal-500 { background-color: #14b8a6 !important; }
        .bg-orange-500 { background-color: #f97316 !important; }
        .bg-cyan-500 { background-color: #06b6d4 !important; }

        /* Goal Preview Styles */
        .goal-preview {
            margin-top: 2rem;
        }

        .preview-card {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 1.5rem;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .preview-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .preview-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .preview-icon i {
            font-size: 1.5rem;
        }

        .preview-details h6 {
            color: white;
            font-weight: 600;
            margin: 0 0 0.25rem 0;
        }

        .preview-amount {
            color: rgba(255, 255, 255, 0.8);
            font-size: 1.1rem;
            margin: 0;
        }

        .preview-progress {
            margin-top: 1rem;
        }

        .preview-progress .progress {
            height: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            overflow: hidden;
        }

        .preview-progress .progress-bar {
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.3s ease;
        }

        /* Color-specific preview gradients */
        .bg-purple-gradient { background: linear-gradient(135deg, #8b5cf6, #7c3aed) !important; }
        .bg-blue-gradient { background: linear-gradient(135deg, #3b82f6, #2563eb) !important; }
        .bg-green-gradient { background: linear-gradient(135deg, #10b981, #059669) !important; }
        .bg-red-gradient { background: linear-gradient(135deg, #ef4444, #dc2626) !important; }
        .bg-yellow-gradient { background: linear-gradient(135deg, #f59e0b, #d97706) !important; }
        .bg-pink-gradient { background: linear-gradient(135deg, #ec4899, #db2777) !important; }
        .bg-indigo-gradient { background: linear-gradient(135deg, #6366f1, #4f46e5) !important; }
        .bg-teal-gradient { background: linear-gradient(135deg, #14b8a6, #0d9488) !important; }
        .bg-orange-gradient { background: linear-gradient(135deg, #f97316, #ea580c) !important; }
        .bg-cyan-gradient { background: linear-gradient(135deg, #06b6d4, #0891b2) !important; }

        /* Loading and Animation States */
        .loading {
            position: relative;
            overflow: hidden;
        }

        .loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            animation: loading 1.5s infinite;
        }        @@keyframes loading {
            0% { left: -100%; }
            100% { left: 100%; }
        }
    </style>
}