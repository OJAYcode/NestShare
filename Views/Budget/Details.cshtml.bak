@model Thrift.Models.Budget
@{
    ViewData["Title"] = $"Budget: {Model.Name}";
    
    var totalIncome = Model.TotalIncome + Model.AdditionalIncome;
    var expenseCategories = new List<(string Name, decimal Amount, string Color)>
    {
        ("Housing", Model.HousingExpenses, "#3b82f6"),
        ("Utilities", Model.UtilitiesExpenses, "#f59e0b"),
        ("Transportation", Model.TransportationExpenses, "#10b981"),
        ("Food", Model.FoodExpenses, "#ef4444"),
        ("Healthcare", Model.HealthcareExpenses, "#ec4899"),
        ("Entertainment", Model.EntertainmentExpenses, "#8b5cf6"),
        ("Personal", Model.PersonalExpenses, "#f97316"),
        ("Savings", Model.SavingsAllocation, "#22c55e"),
        ("Debt Payment", Model.DebtPayment, "#dc2626"),
        ("Other", Model.OtherExpenses, "#6b7280")
    };
}

<div class="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="mb-8">
            <nav class="flex mb-3" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 md:space-x-3">
                    <li class="inline-flex items-center">
                        <a asp-controller="Budget" asp-action="Index" class="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-900">
                            <i class="fas fa-file-invoice-dollar mr-2"></i>
                            Budgets
                        </a>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <i class="fas fa-chevron-right text-gray-400 mx-2 text-xs"></i>
                            <span class="text-sm font-medium text-gray-500">@Model.Name</span>
                        </div>
                    </li>
                </ol>
            </nav>
            
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                <h1 class="text-3xl font-bold text-gray-900">@Model.Name</h1>
                <div class="mt-4 sm:mt-0 flex space-x-2">
                    <a asp-controller="Budget" asp-action="Edit" asp-route-id="@Model.Id" class="inline-flex items-center px-3 py-1.5 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent">
                        <i class="fas fa-edit mr-1.5"></i> Edit
                    </a>
                    <a asp-controller="Budget" asp-action="Delete" asp-route-id="@Model.Id" class="inline-flex items-center px-3 py-1.5 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        <i class="fas fa-trash-alt mr-1.5"></i> Delete
                    </a>
                </div>
            </div>
            <p class="text-gray-500">Budget for @Model.Month.ToString("MMMM yyyy")</p>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-8">
            <!-- Budget Overview -->
            <div class="lg:col-span-5">
                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                    <div class="px-6 py-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-b">
                        <h2 class="text-xl font-semibold text-gray-900">Budget Overview</h2>
                    </div>
                    <div class="p-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                            <div>
                                <div class="text-sm text-gray-500 font-medium">Income</div>
                                <div class="text-2xl font-bold text-gray-900">$@totalIncome.ToString("N2")</div>
                                <div class="text-xs text-gray-500 mt-1">
                                    <span class="font-medium">Primary:</span> $@Model.TotalIncome.ToString("N2")
                                    @if (Model.AdditionalIncome > 0)
                                    {
                                        <br />
                                        <span class="font-medium">Additional:</span> $@Model.AdditionalIncome.ToString("N2")
                                    }
                                </div>
                            </div>
                            <div>
                                <div class="text-sm text-gray-500 font-medium">Total Expenses</div>
                                <div class="text-2xl font-bold text-gray-900">$@Model.TotalExpenses.ToString("N2")</div>
                                <div class="flex items-center mt-1">
                                    @if (Model.RemainingBudget >= 0)
                                    {
                                        <div class="text-xs text-green-600 font-medium">
                                            Surplus: $@Math.Abs(Model.RemainingBudget).ToString("N2")
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-xs text-red-600 font-medium">
                                            Deficit: $@Math.Abs(Model.RemainingBudget).ToString("N2")
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-6">
                            <div class="flex justify-between mb-1 text-sm">
                                <span class="font-medium text-gray-700">Budget Progress</span>
                                <span class="text-gray-500">@(totalIncome > 0 ? Math.Round((Model.TotalExpenses / totalIncome) * 100) : 0)%</span>
                            </div>
                            <div class="h-3 w-full bg-gray-200 rounded-full overflow-hidden">
                                @if (Model.RemainingBudget >= 0)
                                {
                                    <div class="h-3 bg-blue-600 rounded-full" 
                                         style="width: @(totalIncome > 0 ? Math.Min(100, (Model.TotalExpenses / totalIncome) * 100) : 0)%"></div>
                                }
                                else
                                {
                                    <div class="h-3 bg-red-500 rounded-full" 
                                         style="width: @(totalIncome > 0 ? Math.Min(100, (Model.TotalExpenses / totalIncome) * 100) : 0)%"></div>
                                }
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(Model.Notes))
                        {
                            <div class="mb-6 p-4 bg-yellow-50 rounded-lg">
                                <h3 class="text-sm font-medium text-yellow-800 mb-2">Notes</h3>
                                <p class="text-sm text-yellow-700">@Model.Notes</p>
                            </div>
                        }
                        
                        <div>
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Expense Breakdown</h3>
                            <div class="h-64">
                                <canvas id="expense-chart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Expense Details -->
            <div class="lg:col-span-7">
                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                    <div class="px-6 py-4 bg-gradient-to-r from-indigo-50 to-purple-50 border-b">
                        <h2 class="text-xl font-semibold text-gray-900">Expense Details</h2>
                    </div>
                    <div class="p-6">
                        <div class="space-y-5">
                            @foreach (var category in expenseCategories.Where(c => c.Amount > 0))
                            {
                                <div>
                                    <div class="flex justify-between mb-1">
                                        <div class="flex items-center">
                                            <div class="h-3 w-3 rounded-full mr-2" style="background-color: @category.Color"></div>
                                            <span class="text-sm font-medium text-gray-700">@category.Name</span>
                                        </div>
                                        <span class="text-sm text-gray-900 font-medium">$@category.Amount.ToString("N2")</span>
                                    </div>
                                    <div class="h-2 w-full bg-gray-200 rounded-full overflow-hidden">
                                        <div class="h-2 rounded-full" 
                                             style="width: @(totalIncome > 0 ? Math.Min(100, (category.Amount / totalIncome) * 100) : 0)%; background-color: @category.Color"></div>
                                    </div>
                                    <div class="text-xs text-gray-500 text-right mt-1">
                                        @(totalIncome > 0 ? Math.Round((category.Amount / totalIncome) * 100) : 0)% of income
                                    </div>
                                </div>
                            }
                            
                            @if (!expenseCategories.Any(c => c.Amount > 0))
                            {
                                <div class="text-center py-8">
                                    <p class="text-gray-500">No expenses recorded for this budget.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const ctx = document.getElementById('expense-chart').getContext('2d');
            
            // Filter out zero-value categories
            const categories = @Json.Serialize(expenseCategories.Select(c => c.Name).ToArray());
            const amounts = @Json.Serialize(expenseCategories.Select(c => c.Amount).ToArray());
            const colors = @Json.Serialize(expenseCategories.Select(c => c.Color).ToArray());
            
            const nonZeroCategories = [];
            const nonZeroAmounts = [];
            const nonZeroColors = [];
            
            for (let i = 0; i < amounts.length; i++) {
                if (amounts[i] > 0) {
                    nonZeroCategories.push(categories[i]);
                    nonZeroAmounts.push(amounts[i]);
                    nonZeroColors.push(colors[i]);
                }
            }
            
            const expenseChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: nonZeroCategories,
                    datasets: [{
                        data: nonZeroAmounts,
                        backgroundColor: nonZeroColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 12,
                                padding: 15
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                    return `${label}: $${value.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
}